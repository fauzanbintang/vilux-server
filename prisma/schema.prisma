// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

enum Role {
  admin
  client
  vip_client
}

enum Gender {
  male
  female
  others
}

enum PaymentStatus {
  success
  failed
  pending
}

enum VoucherType {
  promotion
  referral
}

enum CategoryName {
  sneakers
  bag
  apparel
  accessories
}

enum LegitCheckStatus {
  brand_category
  upload_data
  payment
  data_validation
  revise_data
  legit_checking
  completed
}

enum LegitStatus {
  authentic
  fake
  unidentified
}

model User {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username      String   @unique @db.VarChar(100)
  email         String   @unique @db.VarChar(100)
  password      String   @db.VarChar(100)
  role          Role     @default(client)
  full_name     String   @db.VarChar(100)
  date_of_birth DateTime
  gender        Gender
  updated_at    DateTime @default(now()) @updatedAt
  created_at    DateTime @default(now())

  @@map("users")
}

model File {
  id                      String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  path                    String
  file_name               String
  url                     String
  updated_at              DateTime              @default(now()) @updatedAt
  created_at              DateTime              @default(now())
  Brand                   Brand[]
  Category                Category[]
  CategoryInstruction     CategoryInstruction[]
  LegitChecks_cover       LegitChecks[]         @relation(name: "cover_file")
  LegitChecks_certificate LegitChecks[]         @relation(name: "certificate_file")
  LegitCheckImages        LegitCheckImages[]

  @@map("files")
}

model Brand {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  file_id     String        @db.Uuid
  file        File          @relation(fields: [file_id], references: [id])
  updated_at  DateTime      @default(now()) @updatedAt
  created_at  DateTime      @default(now())
  LegitChecks LegitChecks[]

  @@map("brands")
}

model Payment {
  id            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  updated_at    DateTime      @default(now()) @updatedAt
  created_at    DateTime      @default(now())
  method        Json
  amount        String
  status        PaymentStatus
  status_log    Json
  external_id   String
  service_fee   String
  client_amount String
  Order         Order[]

  @@map("payments")
}

model Voucher {
  id            String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  updated_at    DateTime    @default(now()) @updatedAt
  created_at    DateTime    @default(now())
  name          String
  code          String
  voucher_type  VoucherType
  discount      String
  quota_usage   Int
  started_at    DateTime
  expired_at    DateTime
  active_status Boolean     @default(false)
  Order         Order[]

  @@map("vouchers")
}

model Category {
  id                  String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  updated_at          DateTime              @default(now()) @updatedAt
  created_at          DateTime              @default(now())
  name                CategoryName
  file_id             String                @db.Uuid
  file                File                  @relation(fields: [file_id], references: [id])
  CategoryInstruction CategoryInstruction[]
  LegitChecks         LegitChecks[]

  @@map("categories")
}

model CategoryInstruction {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  updated_at  DateTime @default(now()) @updatedAt
  created_at  DateTime @default(now())
  name        String
  category_id String   @db.Uuid
  file_id     String   @db.Uuid
  category    Category @relation(fields: [category_id], references: [id])
  file        File     @relation(fields: [file_id], references: [id])

  @@map("category_instructions")
}

model Order {
  id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  updated_at      DateTime @default(now()) @updatedAt
  created_at      DateTime @default(now())
  code            String
  client_info     Json
  payment_id      String   @db.Uuid
  payment         Payment  @relation(fields: [payment_id], references: [id])
  legit_check_id  String   @db.Uuid
  voucher_id      String   @db.Uuid
  voucher         Voucher  @relation(fields: [voucher_id], references: [id])
  original_amount String

  @@map("orders")
}

model LegitChecks {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  updated_at       DateTime           @default(now()) @updatedAt
  created_at       DateTime           @default(now())
  brand_id         String             @db.Uuid
  brand            Brand              @relation(fields: [brand_id], references: [id])
  category_id      String             @db.Uuid
  category         Category           @relation(fields: [category_id], references: [id])
  check_status     LegitCheckStatus
  product_name     String?
  legit_status     LegitStatus?
  client_note      String?
  admin_note       String?
  cover_id         String?            @db.Uuid
  cover            File?              @relation(name: "cover_file", fields: [cover_id], references: [id])
  certificate_id   String?            @db.Uuid
  certificate      File?              @relation(name: "certificate_file", fields: [certificate_id], references: [id])
  LegitCheckImages LegitCheckImages[]
}

model LegitCheckImages {
  id             String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  updated_at     DateTime    @default(now()) @updatedAt
  created_at     DateTime    @default(now())
  status         Boolean?
  name           String
  legit_check_id String      @db.Uuid
  legit_check    LegitChecks @relation(fields: [legit_check_id], references: [id])
  file_id        String      @db.Uuid
  file           File        @relation(fields: [file_id], references: [id])
}
