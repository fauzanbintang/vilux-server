// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

enum Role {
  admin
  client
  vip_client
}

enum Gender {
  male
  female
  others
}

enum PaymentStatus {
  success
  failed
  pending
}

enum VoucherType {
  promotion
  referral
  refund
}

enum LegitCheckStatus {
  brand_category
  upload_data
  payment
  data_validation
  revise_data
  legit_checking
  completed
}

enum LegitStatus {
  authentic
  fake
  unidentified
}

model User {
  id                 String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username           String        @unique @db.VarChar(100)
  email              String        @unique @db.VarChar(100)
  password           String        @db.VarChar(100)
  role               Role          @default(client)
  full_name          String        @db.VarChar(100)
  date_of_birth      DateTime
  gender             Gender
  certificate_prefix String        @default("VLX") @db.VarChar(3)
  phone_number       String?       @unique
  verified_email     Boolean       @default(false)
  updated_at         DateTime      @default(now()) @updatedAt
  created_at         DateTime      @default(now())
  LegitChecks        LegitChecks[]
  Voucher            Voucher[]
  OTP                OTP[]

  @@map("users")
}

model File {
  id                                 String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  path                               String
  file_name                          String                   @unique
  url                                String
  updated_at                         DateTime                 @default(now()) @updatedAt
  created_at                         DateTime                 @default(now())
  Brand                              Brand[]
  Category                           Category[]
  Subcategory                        Subcategory[]
  SubcategoryInstructionIcon         SubcategoryInstruction[] @relation(name: "icon_file")
  SubcategoryInstructionExampleImage SubcategoryInstruction[] @relation(name: "example_image_file")
  LegitChecksCover                   LegitChecks[]            @relation(name: "cover_file")
  LegitChecksCertificate             LegitChecks[]            @relation(name: "certificate_file")
  LegitChecks                        LegitChecks[]
  LegitCheckImages                   LegitCheckImages[]
  Services                           Services[]
  Banner                             Banner[]

  @@map("files")
}

model Brand {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  file_id     String?       @db.Uuid
  file        File?         @relation(fields: [file_id], references: [id])
  updated_at  DateTime      @default(now()) @updatedAt
  created_at  DateTime      @default(now())
  LegitChecks LegitChecks[]

  @@map("brands")
}

model Payment {
  id            String        @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  updated_at    DateTime      @default(now()) @updatedAt
  created_at    DateTime      @default(now())
  method        Json
  amount        String
  status        PaymentStatus
  status_log    Json
  external_id   String        @unique
  service_fee   String
  client_amount String
  order         Order?        @relation()

  @@map("payments")
}

model Voucher {
  id           String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  updated_at   DateTime    @default(now()) @updatedAt
  created_at   DateTime    @default(now())
  name         String
  voucher_type VoucherType
  started_at   DateTime
  expired_at   DateTime
  discount     Int?
  code         String?
  user_id      String?     @db.Uuid
  user         User?       @relation(fields: [user_id], references: [id])
  Order        Order[]

  @@map("vouchers")
}

model Category {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  updated_at  DateTime      @default(now()) @updatedAt
  created_at  DateTime      @default(now())
  name        String
  file_id     String?       @db.Uuid
  file        File?         @relation(fields: [file_id], references: [id])
  LegitChecks LegitChecks[]
  Subcategory Subcategory[]

  @@map("categories")
}

model Subcategory {
  id                     String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  updated_at             DateTime                 @default(now()) @updatedAt
  created_at             DateTime                 @default(now())
  name                   String
  category_id            String                   @db.Uuid
  category               Category                 @relation(fields: [category_id], references: [id])
  file_id                String?                  @db.Uuid
  file                   File?                    @relation(fields: [file_id], references: [id])
  SubcategoryInstruction SubcategoryInstruction[]
  LegitChecks            LegitChecks[]

  @@map("subcategories")
}

model SubcategoryInstruction {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  updated_at       DateTime           @default(now()) @updatedAt
  created_at       DateTime           @default(now())
  name             String
  subcategory_id   String             @db.Uuid
  subcategory      Subcategory        @relation(fields: [subcategory_id], references: [id])
  sort_order       Int                @default(0)
  icon_id          String?            @db.Uuid
  icon             File?              @relation(name: "icon_file", fields: [icon_id], references: [id])
  example_image_id String?            @db.Uuid
  example_image    File?              @relation(name: "example_image_file", fields: [example_image_id], references: [id])
  LegitCheckImages LegitCheckImages[]

  @@map("subcategory_instructions")
}

model LegitChecks {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  updated_at       DateTime           @default(now()) @updatedAt
  created_at       DateTime           @default(now())
  client_id        String             @db.Uuid
  client           User               @relation(fields: [client_id], references: [id])
  code             String
  brand_id         String             @db.Uuid
  brand            Brand              @relation(fields: [brand_id], references: [id])
  category_id      String             @db.Uuid
  category         Category           @relation(fields: [category_id], references: [id])
  subcategory_id   String             @db.Uuid
  subcategory      Subcategory        @relation(fields: [subcategory_id], references: [id])
  check_status     LegitCheckStatus
  product_name     String?
  legit_status     LegitStatus?
  client_note      String?
  admin_note       String?
  cover_id         String?            @db.Uuid
  cover            File?              @relation(name: "cover_file", fields: [cover_id], references: [id])
  certificate_code String?
  certificate_id   String?            @db.Uuid
  certificate      File?              @relation(name: "certificate_file", fields: [certificate_id], references: [id])
  file_id          String?            @db.Uuid
  file             File?              @relation(fields: [file_id], references: [id])
  watched          Boolean            @default(false)
  Order            Order[]
  LegitCheckImages LegitCheckImages[]

  @@map("legit_checks")
}

model Services {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  updated_at    DateTime @default(now()) @updatedAt
  created_at    DateTime @default(now())
  name          String
  working_hours Int
  normal_price  BigInt
  vip_price     BigInt
  file          File?    @relation(fields: [file_id], references: [id])
  file_id       String?  @db.Uuid
  Order         Order[]

  @@map("services")
}

model Order {
  id              String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  updated_at      DateTime    @default(now()) @updatedAt
  created_at      DateTime    @default(now())
  code            String
  legit_check_id  String      @db.Uuid
  legit_check     LegitChecks @relation(fields: [legit_check_id], references: [id])
  service_id      String      @db.Uuid
  service         Services    @relation(fields: [service_id], references: [id])
  original_amount BigInt
  voucher_id      String?     @db.Uuid
  voucher         Voucher?    @relation(fields: [voucher_id], references: [id])
  payment_id      String?     @unique @db.Uuid
  payment         Payment?    @relation(fields: [payment_id], references: [id])

  @@map("orders")
}

model LegitCheckImages {
  id                         String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  updated_at                 DateTime                @default(now()) @updatedAt
  created_at                 DateTime                @default(now())
  legit_check_id             String                  @db.Uuid
  legit_check                LegitChecks             @relation(fields: [legit_check_id], references: [id])
  file_id                    String?                 @db.Uuid
  file                       File?                   @relation(fields: [file_id], references: [id])
  subcategory_instruction_id String?                 @db.Uuid
  subcategory_instruction    SubcategoryInstruction? @relation(fields: [subcategory_instruction_id], references: [id])
  status                     Boolean?

  @@map("legit_check_images")
}

model Banner {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  updated_at DateTime @default(now()) @updatedAt
  created_at DateTime @default(now())
  name       String
  link       String?
  file_id    String?  @db.Uuid
  file       File?    @relation(fields: [file_id], references: [id])

  @@map("banners")
}

model OTP {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  token      String
  user_id    String   @db.Uuid
  user       User     @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())

  @@map("otp")
}
